var search_data = {"index":{"searchIndex":["curl","easy","err","abortedbycallbackerror","accessdeniederror","again","badcallingordererror","badcontentencodingerror","badfilelisterror","badfunctionargumenterror","badoptionsyntaxerror","badpasswordenterederror","badpassworderror","badresumeerror","cantgethosterror","cantreconnecterror","chunkfailederror","connectionfailederror","convfailed","convreqd","couldntbinderror","couldntgetsizeerror","couldntreaderror","couldntretrfileerror","couldntsetasciierror","couldntsetbinaryerror","couldntstorfileerror","couldntuseresterror","cseqerror","curlerror","curlok","diskfullerror","ftperror","ftpquoteerror","ftpsslfailed","ftpwriteerror","failediniterror","fileerror","fileexistserror","filesizeexceedederror","functionnotfounderror","gotnothingerror","http2streamerror","httperror","httpfailederror","httpposterror","httprangeerror","hostresolutionerror","illegaloperationerror","interfacefailederror","invalidldapurlerror","invalidpostfielderror","ldaperror","librarynotfounderror","logindeniederror","malformedurlerror","malformedurlusererror","malformedusererror","multiaddedalready","multibadeasyhandle","multibadhandle","multibadsocket","multiiniterror","multiinternalerror","multioutofmemory","multiperform","multiunknownoption","noconnectionavailableerror","nosuchusererror","notbuiltinerror","notfounderror","obsoleteerror","outofmemoryerror","ppretfailederror","partialfileerror","permissionerror","portfailederror","proxyresolutionerror","rtsperror","readerror","recverror","remotefilenotfound","ssh","sslcacertificateerror","sslcrlbadfile","sslcaertbadfile","sslcertificateerror","sslconnecterror","sslcyphererror","sslengineinitfailederror","sslenginenotfounderror","sslenginesetfailederror","sslinvalidcertstatuserror","sslissuererror","sslpeercertificateerror","sslpinnedpubkeynotmatcherror","sslshutdownfailed","searchfailederror","senderror","sendfailedrewind","sessionerror","shareinuseerror","tftperror","telneterror","timeouterror","toomanyredirectserror","unknowniderror","unknownoptionerror","unsupportedprotocolerror","weird227formaterror","weirdpassreplyerror","weirdpasvreplyerror","weirdreplyerror","weirduserreplyerror","writeerror","multi","postfield","upload","_add()","_close()","_remove()","app_connect_time()","asyncdns?()","autoclose()","autoclose=()","autoreferer=()","body_str()","cacert()","cacert=()","cert()","cert=()","cert_key()","cert_key=()","certpassword=()","certtype()","certtype=()","clone()","close()","connect_time()","connect_timeout()","connect_timeout=()","connect_timeout_ms()","connect_timeout_ms=()","content()","content()","content=()","content_type()","content_type()","content_type=()","conv?()","cookiefile()","cookiejar()","cookielist()","cookies()","debug?()","default_timeout()","default_timeout=()","dns_cache_timeout()","dns_cache_timeout=()","download_speed()","downloaded_bytes()","downloaded_content_length()","dup()","enable_cookies=()","enable_cookies?()","encoding()","encoding=()","error()","escape()","fetch_file_time=()","fetch_file_time?()","file()","file_time()","follow_location?()","ftp_commands()","ftp_commands=()","ftp_entry_path()","ftp_filemethod()","ftp_filemethod=()","ftp_response_timeout()","ftp_response_timeout=()","getinfo()","gssnegotiate?()","header_in_body=()","header_in_body?()","header_size()","header_str()","headers()","headers=()","http()","http2?()","http_auth_types()","http_auth_types=()","http_connect_code()","http_post()","http_put()","idn?()","ignore_content_length=()","ignore_content_length?()","inspect()","interface()","ipv6?()","kerberos4?()","largefile?()","last_effective_url()","last_result()","libz?()","local_file()","local_file=()","local_port()","local_port=()","local_port_range()","local_port_range=()","low_speed_limit()","low_speed_limit=()","low_speed_time()","low_speed_time=()","max_connects=()","max_recv_speed_large()","max_recv_speed_large=()","max_redirects()","max_redirects=()","max_send_speed_large()","max_send_speed_large=()","multi()","multi=()","multipart_form_post=()","multipart_form_post?()","name()","name=()","name_lookup_time()","new()","new()","new()","ntlm?()","num_connects()","offset()","offset=()","on_body()","on_complete()","on_debug()","on_failure()","on_header()","on_missing()","on_progress()","on_redirect()","on_success()","os_errno()","password()","password=()","perform()","pipeline=()","post_body()","post_body=()","pre_transfer_time()","primary_ip()","proxy_auth_types()","proxy_auth_types=()","proxy_headers()","proxy_headers=()","proxy_port()","proxy_port=()","proxy_tunnel=()","proxy_tunnel?()","proxy_type()","proxy_type=()","proxy_url()","proxypwd()","put_data=()","redirect_count()","redirect_time()","redirect_url()","remote_file()","remote_file=()","request_size()","reset()","resolve()","resolve=()","resolve_mode()","resolve_mode=()","response_code()","set_content_proc()","setopt()","spnego?()","ssl?()","ssl_verify_host()","ssl_verify_host_integer=()","ssl_verify_peer=()","ssl_verify_peer?()","ssl_verify_result()","ssl_version()","ssl_version=()","sspi?()","start_transfer_time()","stream()","stream=()","timeout()","timeout=()","timeout_ms()","timeout_ms=()","to_s()","to_str()","total_time()","unescape()","unrestricted_auth=()","unrestricted_auth?()","upload_speed()","uploaded_bytes()","uploaded_content_length()","url()","use_netrc=()","use_netrc?()","use_ssl()","use_ssl=()","useragent()","useragent=()","username()","username=()","userpwd()","verbose=()","verbose?()","license"],"longSearchIndex":["curl","curl::easy","curl::err","curl::err::abortedbycallbackerror","curl::err::accessdeniederror","curl::err::again","curl::err::badcallingordererror","curl::err::badcontentencodingerror","curl::err::badfilelisterror","curl::err::badfunctionargumenterror","curl::err::badoptionsyntaxerror","curl::err::badpasswordenterederror","curl::err::badpassworderror","curl::err::badresumeerror","curl::err::cantgethosterror","curl::err::cantreconnecterror","curl::err::chunkfailederror","curl::err::connectionfailederror","curl::err::convfailed","curl::err::convreqd","curl::err::couldntbinderror","curl::err::couldntgetsizeerror","curl::err::couldntreaderror","curl::err::couldntretrfileerror","curl::err::couldntsetasciierror","curl::err::couldntsetbinaryerror","curl::err::couldntstorfileerror","curl::err::couldntuseresterror","curl::err::cseqerror","curl::err::curlerror","curl::err::curlok","curl::err::diskfullerror","curl::err::ftperror","curl::err::ftpquoteerror","curl::err::ftpsslfailed","curl::err::ftpwriteerror","curl::err::failediniterror","curl::err::fileerror","curl::err::fileexistserror","curl::err::filesizeexceedederror","curl::err::functionnotfounderror","curl::err::gotnothingerror","curl::err::http2streamerror","curl::err::httperror","curl::err::httpfailederror","curl::err::httpposterror","curl::err::httprangeerror","curl::err::hostresolutionerror","curl::err::illegaloperationerror","curl::err::interfacefailederror","curl::err::invalidldapurlerror","curl::err::invalidpostfielderror","curl::err::ldaperror","curl::err::librarynotfounderror","curl::err::logindeniederror","curl::err::malformedurlerror","curl::err::malformedurlusererror","curl::err::malformedusererror","curl::err::multiaddedalready","curl::err::multibadeasyhandle","curl::err::multibadhandle","curl::err::multibadsocket","curl::err::multiiniterror","curl::err::multiinternalerror","curl::err::multioutofmemory","curl::err::multiperform","curl::err::multiunknownoption","curl::err::noconnectionavailableerror","curl::err::nosuchusererror","curl::err::notbuiltinerror","curl::err::notfounderror","curl::err::obsoleteerror","curl::err::outofmemoryerror","curl::err::ppretfailederror","curl::err::partialfileerror","curl::err::permissionerror","curl::err::portfailederror","curl::err::proxyresolutionerror","curl::err::rtsperror","curl::err::readerror","curl::err::recverror","curl::err::remotefilenotfound","curl::err::ssh","curl::err::sslcacertificateerror","curl::err::sslcrlbadfile","curl::err::sslcaertbadfile","curl::err::sslcertificateerror","curl::err::sslconnecterror","curl::err::sslcyphererror","curl::err::sslengineinitfailederror","curl::err::sslenginenotfounderror","curl::err::sslenginesetfailederror","curl::err::sslinvalidcertstatuserror","curl::err::sslissuererror","curl::err::sslpeercertificateerror","curl::err::sslpinnedpubkeynotmatcherror","curl::err::sslshutdownfailed","curl::err::searchfailederror","curl::err::senderror","curl::err::sendfailedrewind","curl::err::sessionerror","curl::err::shareinuseerror","curl::err::tftperror","curl::err::telneterror","curl::err::timeouterror","curl::err::toomanyredirectserror","curl::err::unknowniderror","curl::err::unknownoptionerror","curl::err::unsupportedprotocolerror","curl::err::weird227formaterror","curl::err::weirdpassreplyerror","curl::err::weirdpasvreplyerror","curl::err::weirdreplyerror","curl::err::weirduserreplyerror","curl::err::writeerror","curl::multi","curl::postfield","curl::upload","curl::multi#_add()","curl::multi#_close()","curl::multi#_remove()","curl::easy#app_connect_time()","curl::asyncdns?()","curl::multi::autoclose()","curl::multi::autoclose=()","curl::easy#autoreferer=()","curl::easy#body_str()","curl::easy#cacert()","curl::easy#cacert=()","curl::easy#cert()","curl::easy#cert=()","curl::easy#cert_key()","curl::easy#cert_key=()","curl::easy#certpassword=()","curl::easy#certtype()","curl::easy#certtype=()","curl::easy#clone()","curl::easy#close()","curl::easy#connect_time()","curl::easy#connect_timeout()","curl::easy#connect_timeout=()","curl::easy#connect_timeout_ms()","curl::easy#connect_timeout_ms=()","curl::postfield#content()","curl::postfield::content()","curl::postfield#content=()","curl::easy#content_type()","curl::postfield#content_type()","curl::postfield#content_type=()","curl::conv?()","curl::easy#cookiefile()","curl::easy#cookiejar()","curl::easy#cookielist()","curl::easy#cookies()","curl::debug?()","curl::multi::default_timeout()","curl::multi::default_timeout=()","curl::easy#dns_cache_timeout()","curl::easy#dns_cache_timeout=()","curl::easy#download_speed()","curl::easy#downloaded_bytes()","curl::easy#downloaded_content_length()","curl::easy#dup()","curl::easy#enable_cookies=()","curl::easy#enable_cookies?()","curl::easy#encoding()","curl::easy#encoding=()","curl::easy::error()","curl::easy#escape()","curl::easy#fetch_file_time=()","curl::easy#fetch_file_time?()","curl::postfield::file()","curl::easy#file_time()","curl::easy#follow_location?()","curl::easy#ftp_commands()","curl::easy#ftp_commands=()","curl::easy#ftp_entry_path()","curl::easy#ftp_filemethod()","curl::easy#ftp_filemethod=()","curl::easy#ftp_response_timeout()","curl::easy#ftp_response_timeout=()","curl::easy#getinfo()","curl::gssnegotiate?()","curl::easy#header_in_body=()","curl::easy#header_in_body?()","curl::easy#header_size()","curl::easy#header_str()","curl::easy#headers()","curl::easy#headers=()","curl::easy#http()","curl::http2?()","curl::easy#http_auth_types()","curl::easy#http_auth_types=()","curl::easy#http_connect_code()","curl::easy#http_post()","curl::easy#http_put()","curl::idn?()","curl::easy#ignore_content_length=()","curl::easy#ignore_content_length?()","curl::easy#inspect()","curl::easy#interface()","curl::ipv6?()","curl::kerberos4?()","curl::largefile?()","curl::easy#last_effective_url()","curl::easy#last_result()","curl::libz?()","curl::postfield#local_file()","curl::postfield#local_file=()","curl::easy#local_port()","curl::easy#local_port=()","curl::easy#local_port_range()","curl::easy#local_port_range=()","curl::easy#low_speed_limit()","curl::easy#low_speed_limit=()","curl::easy#low_speed_time()","curl::easy#low_speed_time=()","curl::multi#max_connects=()","curl::easy#max_recv_speed_large()","curl::easy#max_recv_speed_large=()","curl::easy#max_redirects()","curl::easy#max_redirects=()","curl::easy#max_send_speed_large()","curl::easy#max_send_speed_large=()","curl::easy#multi()","curl::easy#multi=()","curl::easy#multipart_form_post=()","curl::easy#multipart_form_post?()","curl::postfield#name()","curl::postfield#name=()","curl::easy#name_lookup_time()","curl::easy::new()","curl::multi::new()","curl::upload::new()","curl::ntlm?()","curl::easy#num_connects()","curl::upload#offset()","curl::upload#offset=()","curl::easy#on_body()","curl::easy#on_complete()","curl::easy#on_debug()","curl::easy#on_failure()","curl::easy#on_header()","curl::easy#on_missing()","curl::easy#on_progress()","curl::easy#on_redirect()","curl::easy#on_success()","curl::easy#os_errno()","curl::easy#password()","curl::easy#password=()","curl::multi#perform()","curl::multi#pipeline=()","curl::easy#post_body()","curl::easy#post_body=()","curl::easy#pre_transfer_time()","curl::easy#primary_ip()","curl::easy#proxy_auth_types()","curl::easy#proxy_auth_types=()","curl::easy#proxy_headers()","curl::easy#proxy_headers=()","curl::easy#proxy_port()","curl::easy#proxy_port=()","curl::easy#proxy_tunnel=()","curl::easy#proxy_tunnel?()","curl::easy#proxy_type()","curl::easy#proxy_type=()","curl::easy#proxy_url()","curl::easy#proxypwd()","curl::easy#put_data=()","curl::easy#redirect_count()","curl::easy#redirect_time()","curl::easy#redirect_url()","curl::postfield#remote_file()","curl::postfield#remote_file=()","curl::easy#request_size()","curl::easy#reset()","curl::easy#resolve()","curl::easy#resolve=()","curl::easy#resolve_mode()","curl::easy#resolve_mode=()","curl::easy#response_code()","curl::postfield#set_content_proc()","curl::easy#setopt()","curl::spnego?()","curl::ssl?()","curl::easy#ssl_verify_host()","curl::easy#ssl_verify_host_integer=()","curl::easy#ssl_verify_peer=()","curl::easy#ssl_verify_peer?()","curl::easy#ssl_verify_result()","curl::easy#ssl_version()","curl::easy#ssl_version=()","curl::sspi?()","curl::easy#start_transfer_time()","curl::upload#stream()","curl::upload#stream=()","curl::easy#timeout()","curl::easy#timeout=()","curl::easy#timeout_ms()","curl::easy#timeout_ms=()","curl::postfield#to_s()","curl::postfield#to_str()","curl::easy#total_time()","curl::easy#unescape()","curl::easy#unrestricted_auth=()","curl::easy#unrestricted_auth?()","curl::easy#upload_speed()","curl::easy#uploaded_bytes()","curl::easy#uploaded_content_length()","curl::easy#url()","curl::easy#use_netrc=()","curl::easy#use_netrc?()","curl::easy#use_ssl()","curl::easy#use_ssl=()","curl::easy#useragent()","curl::easy#useragent=()","curl::easy#username()","curl::easy#username=()","curl::easy#userpwd()","curl::easy#verbose=()","curl::easy#verbose?()",""],"info":[["Curl","","Curl.html","",""],["Curl::Easy","","Curl/Easy.html","",""],["Curl::Err","","Curl/Err.html","",""],["Curl::Err::AbortedByCallbackError","","Curl/Err/AbortedByCallbackError.html","",""],["Curl::Err::AccessDeniedError","","Curl/Err/AccessDeniedError.html","",""],["Curl::Err::Again","","Curl/Err/Again.html","",""],["Curl::Err::BadCallingOrderError","","Curl/Err/BadCallingOrderError.html","",""],["Curl::Err::BadContentEncodingError","","Curl/Err/BadContentEncodingError.html","",""],["Curl::Err::BadFileListError","","Curl/Err/BadFileListError.html","",""],["Curl::Err::BadFunctionArgumentError","","Curl/Err/BadFunctionArgumentError.html","",""],["Curl::Err::BadOptionSyntaxError","","Curl/Err/BadOptionSyntaxError.html","",""],["Curl::Err::BadPasswordEnteredError","","Curl/Err/BadPasswordEnteredError.html","",""],["Curl::Err::BadPasswordError","","Curl/Err/BadPasswordError.html","",""],["Curl::Err::BadResumeError","","Curl/Err/BadResumeError.html","",""],["Curl::Err::CantGetHostError","","Curl/Err/CantGetHostError.html","",""],["Curl::Err::CantReconnectError","","Curl/Err/CantReconnectError.html","",""],["Curl::Err::ChunkFailedError","","Curl/Err/ChunkFailedError.html","",""],["Curl::Err::ConnectionFailedError","","Curl/Err/ConnectionFailedError.html","",""],["Curl::Err::ConvFailed","","Curl/Err/ConvFailed.html","",""],["Curl::Err::ConvReqd","","Curl/Err/ConvReqd.html","",""],["Curl::Err::CouldntBindError","","Curl/Err/CouldntBindError.html","",""],["Curl::Err::CouldntGetSizeError","","Curl/Err/CouldntGetSizeError.html","",""],["Curl::Err::CouldntReadError","","Curl/Err/CouldntReadError.html","",""],["Curl::Err::CouldntRetrFileError","","Curl/Err/CouldntRetrFileError.html","",""],["Curl::Err::CouldntSetASCIIError","","Curl/Err/CouldntSetASCIIError.html","",""],["Curl::Err::CouldntSetBinaryError","","Curl/Err/CouldntSetBinaryError.html","",""],["Curl::Err::CouldntStorFileError","","Curl/Err/CouldntStorFileError.html","",""],["Curl::Err::CouldntUseRestError","","Curl/Err/CouldntUseRestError.html","",""],["Curl::Err::CseqError","","Curl/Err/CseqError.html","",""],["Curl::Err::CurlError","","Curl/Err/CurlError.html","",""],["Curl::Err::CurlOK","","Curl/Err/CurlOK.html","",""],["Curl::Err::DiskFullError","","Curl/Err/DiskFullError.html","",""],["Curl::Err::FTPError","","Curl/Err/FTPError.html","",""],["Curl::Err::FTPQuoteError","","Curl/Err/FTPQuoteError.html","",""],["Curl::Err::FTPSSLFailed","","Curl/Err/FTPSSLFailed.html","",""],["Curl::Err::FTPWriteError","","Curl/Err/FTPWriteError.html","",""],["Curl::Err::FailedInitError","","Curl/Err/FailedInitError.html","",""],["Curl::Err::FileError","","Curl/Err/FileError.html","",""],["Curl::Err::FileExistsError","","Curl/Err/FileExistsError.html","",""],["Curl::Err::FileSizeExceededError","","Curl/Err/FileSizeExceededError.html","",""],["Curl::Err::FunctionNotFoundError","","Curl/Err/FunctionNotFoundError.html","",""],["Curl::Err::GotNothingError","","Curl/Err/GotNothingError.html","",""],["Curl::Err::HTTP2StreamError","","Curl/Err/HTTP2StreamError.html","",""],["Curl::Err::HTTPError","","Curl/Err/HTTPError.html","",""],["Curl::Err::HTTPFailedError","","Curl/Err/HTTPFailedError.html","",""],["Curl::Err::HTTPPostError","","Curl/Err/HTTPPostError.html","",""],["Curl::Err::HTTPRangeError","","Curl/Err/HTTPRangeError.html","",""],["Curl::Err::HostResolutionError","","Curl/Err/HostResolutionError.html","",""],["Curl::Err::IllegalOperationError","","Curl/Err/IllegalOperationError.html","",""],["Curl::Err::InterfaceFailedError","","Curl/Err/InterfaceFailedError.html","",""],["Curl::Err::InvalidLDAPURLError","","Curl/Err/InvalidLDAPURLError.html","",""],["Curl::Err::InvalidPostFieldError","","Curl/Err/InvalidPostFieldError.html","",""],["Curl::Err::LDAPError","","Curl/Err/LDAPError.html","",""],["Curl::Err::LibraryNotFoundError","","Curl/Err/LibraryNotFoundError.html","",""],["Curl::Err::LoginDeniedError","","Curl/Err/LoginDeniedError.html","",""],["Curl::Err::MalformedURLError","","Curl/Err/MalformedURLError.html","",""],["Curl::Err::MalformedURLUserError","","Curl/Err/MalformedURLUserError.html","",""],["Curl::Err::MalformedUserError","","Curl/Err/MalformedUserError.html","",""],["Curl::Err::MultiAddedAlready","","Curl/Err/MultiAddedAlready.html","",""],["Curl::Err::MultiBadEasyHandle","","Curl/Err/MultiBadEasyHandle.html","",""],["Curl::Err::MultiBadHandle","","Curl/Err/MultiBadHandle.html","",""],["Curl::Err::MultiBadSocket","","Curl/Err/MultiBadSocket.html","",""],["Curl::Err::MultiInitError","","Curl/Err/MultiInitError.html","",""],["Curl::Err::MultiInternalError","","Curl/Err/MultiInternalError.html","",""],["Curl::Err::MultiOutOfMemory","","Curl/Err/MultiOutOfMemory.html","",""],["Curl::Err::MultiPerform","","Curl/Err/MultiPerform.html","",""],["Curl::Err::MultiUnknownOption","","Curl/Err/MultiUnknownOption.html","",""],["Curl::Err::NoConnectionAvailableError","","Curl/Err/NoConnectionAvailableError.html","",""],["Curl::Err::NoSuchUserError","","Curl/Err/NoSuchUserError.html","",""],["Curl::Err::NotBuiltInError","","Curl/Err/NotBuiltInError.html","",""],["Curl::Err::NotFoundError","","Curl/Err/NotFoundError.html","",""],["Curl::Err::ObsoleteError","","Curl/Err/ObsoleteError.html","",""],["Curl::Err::OutOfMemoryError","","Curl/Err/OutOfMemoryError.html","",""],["Curl::Err::PPRETFailedError","","Curl/Err/PPRETFailedError.html","",""],["Curl::Err::PartialFileError","","Curl/Err/PartialFileError.html","",""],["Curl::Err::PermissionError","","Curl/Err/PermissionError.html","",""],["Curl::Err::PortFailedError","","Curl/Err/PortFailedError.html","",""],["Curl::Err::ProxyResolutionError","","Curl/Err/ProxyResolutionError.html","",""],["Curl::Err::RTSPError","","Curl/Err/RTSPError.html","",""],["Curl::Err::ReadError","","Curl/Err/ReadError.html","",""],["Curl::Err::RecvError","","Curl/Err/RecvError.html","",""],["Curl::Err::RemoteFileNotFound","","Curl/Err/RemoteFileNotFound.html","",""],["Curl::Err::SSH","","Curl/Err/SSH.html","",""],["Curl::Err::SSLCACertificateError","","Curl/Err/SSLCACertificateError.html","",""],["Curl::Err::SSLCRLBadfile","","Curl/Err/SSLCRLBadfile.html","",""],["Curl::Err::SSLCaertBadFile","","Curl/Err/SSLCaertBadFile.html","",""],["Curl::Err::SSLCertificateError","","Curl/Err/SSLCertificateError.html","",""],["Curl::Err::SSLConnectError","","Curl/Err/SSLConnectError.html","",""],["Curl::Err::SSLCypherError","","Curl/Err/SSLCypherError.html","",""],["Curl::Err::SSLEngineInitFailedError","","Curl/Err/SSLEngineInitFailedError.html","",""],["Curl::Err::SSLEngineNotFoundError","","Curl/Err/SSLEngineNotFoundError.html","",""],["Curl::Err::SSLEngineSetFailedError","","Curl/Err/SSLEngineSetFailedError.html","",""],["Curl::Err::SSLInvalidCertStatusError","","Curl/Err/SSLInvalidCertStatusError.html","",""],["Curl::Err::SSLIssuerError","","Curl/Err/SSLIssuerError.html","",""],["Curl::Err::SSLPeerCertificateError","","Curl/Err/SSLPeerCertificateError.html","",""],["Curl::Err::SSLPinnedPubKeyNotMatchError","","Curl/Err/SSLPinnedPubKeyNotMatchError.html","",""],["Curl::Err::SSLShutdownFailed","","Curl/Err/SSLShutdownFailed.html","",""],["Curl::Err::SearchFailedError","","Curl/Err/SearchFailedError.html","",""],["Curl::Err::SendError","","Curl/Err/SendError.html","",""],["Curl::Err::SendFailedRewind","","Curl/Err/SendFailedRewind.html","",""],["Curl::Err::SessionError","","Curl/Err/SessionError.html","",""],["Curl::Err::ShareInUseError","","Curl/Err/ShareInUseError.html","",""],["Curl::Err::TFTPError","","Curl/Err/TFTPError.html","",""],["Curl::Err::TelnetError","","Curl/Err/TelnetError.html","",""],["Curl::Err::TimeoutError","","Curl/Err/TimeoutError.html","",""],["Curl::Err::TooManyRedirectsError","","Curl/Err/TooManyRedirectsError.html","",""],["Curl::Err::UnknownIDError","","Curl/Err/UnknownIDError.html","",""],["Curl::Err::UnknownOptionError","","Curl/Err/UnknownOptionError.html","",""],["Curl::Err::UnsupportedProtocolError","","Curl/Err/UnsupportedProtocolError.html","",""],["Curl::Err::Weird227FormatError","","Curl/Err/Weird227FormatError.html","",""],["Curl::Err::WeirdPassReplyError","","Curl/Err/WeirdPassReplyError.html","",""],["Curl::Err::WeirdPasvReplyError","","Curl/Err/WeirdPasvReplyError.html","",""],["Curl::Err::WeirdReplyError","","Curl/Err/WeirdReplyError.html","",""],["Curl::Err::WeirdUserReplyError","","Curl/Err/WeirdUserReplyError.html","",""],["Curl::Err::WriteError","","Curl/Err/WriteError.html","",""],["Curl::Multi","","Curl/Multi.html","",""],["Curl::PostField","","Curl/PostField.html","",""],["Curl::Upload","","Curl/Upload.html","",""],["_add","Curl::Multi","Curl/Multi.html#method-i-_add","(p1)","<p>Add an easy handle to the multi stack\n"],["_close","Curl::Multi","Curl/Multi.html#method-i-_close","()","<p>multi.close after closing the multi handle all connections will be closed\nand the handle will no longer …\n"],["_remove","Curl::Multi","Curl/Multi.html#method-i-_remove","(p1)","<p># sometime later multi.remove(easy)\n<p>Remove an easy handle from a multi stack.\n<p>Will raise an exception if …\n"],["app_connect_time","Curl::Easy","Curl/Easy.html#method-i-app_connect_time","()",""],["asyncdns?","Curl","Curl.html#method-c-asyncdns-3F","()","<p>Returns true if the installed libcurl was built with support for\nasynchronous name lookups, which allows …\n"],["autoclose","Curl::Multi","Curl/Multi.html#method-c-autoclose","()","<p>Get the global default autoclose setting for all Curl::Multi Handles.\n"],["autoclose=","Curl::Multi","Curl/Multi.html#method-c-autoclose-3D","(p1)","<p>Automatically close open connections after each request. Otherwise, the\nconnection will remain open  …\n"],["autoreferer=","Curl::Easy","Curl/Easy.html#method-i-autoreferer-3D","(p1)","<p>easy = Curl::Easy.new easy.autoreferer=true\n"],["body_str","Curl::Easy","Curl/Easy.html#method-i-body_str","()","<p>Return the response body from the previous call to <code>perform</code>.\nThis is populated by the default <code>on_body</code> …\n"],["cacert","Curl::Easy","Curl/Easy.html#method-i-cacert","()","<p>Obtain the cacert file to use for this Curl::Easy instance.\n"],["cacert=","Curl::Easy","Curl/Easy.html#method-i-cacert-3D","(p1)","<p>Set a cacert bundle to use for this Curl::Easy instance. This file will be\nused to validate SSL certificates. …\n"],["cert","Curl::Easy","Curl/Easy.html#method-i-cert","()","<p>Obtain the cert file to use for this Curl::Easy instance.\n"],["cert=","Curl::Easy","Curl/Easy.html#method-i-cert-3D","(p1)","<p>Set a cert file to use for this Curl::Easy instance. This file will be used\nto validate SSL connections. …\n"],["cert_key","Curl::Easy","Curl/Easy.html#method-i-cert_key","()","<p>Obtain the cert key file to use for this Curl::Easy instance.\n"],["cert_key=","Curl::Easy","Curl/Easy.html#method-i-cert_key-3D","(p1)","<p>Set a cert key to use for this Curl::Easy instance. This file will be used\nto validate SSL certificates. …\n"],["certpassword=","Curl::Easy","Curl/Easy.html#method-i-certpassword-3D","(p1)","<p>Set a password used to open the specified cert\n"],["certtype","Curl::Easy","Curl/Easy.html#method-i-certtype","()","<p>Obtain the cert type used for this Curl::Easy instance\n"],["certtype=","Curl::Easy","Curl/Easy.html#method-i-certtype-3D","(p1)","<p>Set a cert type to use for this Curl::Easy instance. Default is PEM\n"],["clone","Curl::Easy","Curl/Easy.html#method-i-clone","()","<p>Clone this Curl::Easy instance, creating a new instance. This method\nduplicates the underlying CURL* …\n"],["close","Curl::Easy","Curl/Easy.html#method-i-close","()","<p>Close the Curl::Easy instance. Any open connections are closed The easy\nhandle is reinitialized.  If …\n"],["connect_time","Curl::Easy","Curl/Easy.html#method-i-connect_time","()","<p>Retrieve the time, in seconds, it took from the start until the connect to\nthe remote host (or proxy) …\n"],["connect_timeout","Curl::Easy","Curl/Easy.html#method-i-connect_timeout","()","<p>Obtain the maximum time in seconds that you allow the connection to the\nserver to take.\n"],["connect_timeout=","Curl::Easy","Curl/Easy.html#method-i-connect_timeout-3D","(p1)","<p>Set the maximum time in seconds that you allow the connection to the server\nto take. This only limits …\n"],["connect_timeout_ms","Curl::Easy","Curl/Easy.html#method-i-connect_timeout_ms","()","<p>Obtain the maximum time in milliseconds that you allow the connection to\nthe server to take.\n"],["connect_timeout_ms=","Curl::Easy","Curl/Easy.html#method-i-connect_timeout_ms-3D","(p1)","<p>Set the maximum time in milliseconds that you allow the connection to the\nserver to take. This only limits …\n"],["content","Curl::PostField","Curl/PostField.html#method-i-content","()","<p>Obtain the POST field content for this PostField.\n"],["content","Curl::PostField","Curl/PostField.html#method-c-content","(p1, p2 = v2, p3 = v3, &block)","<p>Create a new Curl::PostField, supplying the field name, content, and,\noptionally, Content-type (curl …\n"],["content=","Curl::PostField","Curl/PostField.html#method-i-content-3D","(p1)","<p>Set the POST field content for this PostField. Ignored when a  content_proc\nis supplied via either <code>Curl::PostField.file</code> …\n"],["content_type","Curl::Easy","Curl/Easy.html#method-i-content_type","()","<p>Retrieve the content-type of the downloaded object. This is the value read\nfrom the Content-Type: field. …\n"],["content_type","Curl::PostField","Curl/PostField.html#method-i-content_type","()","<p>Get the POST field Content-type for this PostField.\n"],["content_type=","Curl::PostField","Curl/PostField.html#method-i-content_type-3D","(p1)","<p>Set the POST field Content-type for this PostField.\n"],["conv?","Curl","Curl.html#method-c-conv-3F","()","<p>Returns true if the installed libcurl was built with support for character\nconversions. For libcurl versions …\n"],["cookiefile","Curl::Easy","Curl/Easy.html#method-i-cookiefile","()","<p>Obtain the cookiefile file for this Curl::Easy instance.\n"],["cookiejar","Curl::Easy","Curl/Easy.html#method-i-cookiejar","()","<p>Obtain the cookiejar file to use for this Curl::Easy instance.\n"],["cookielist","Curl::Easy","Curl/Easy.html#method-i-cookielist","()","<p>Retrieves the cookies curl knows in an array of strings. Returned strings\nare in Netscape cookiejar format …\n"],["cookies","Curl::Easy","Curl/Easy.html#method-i-cookies","()","<p>Obtain the cookies for this Curl::Easy instance.\n"],["debug?","Curl","Curl.html#method-c-debug-3F","()","<p>Returns true if the installed libcurl was built with extra debug\ncapabilities built-in. For libcurl versions …\n"],["default_timeout","Curl::Multi","Curl/Multi.html#method-c-default_timeout","()","<p>Get the global default time out for all Curl::Multi Handles.\n"],["default_timeout=","Curl::Multi","Curl/Multi.html#method-c-default_timeout-3D","(p1)","<p>Set the global default time out for all Curl::Multi Handles.  This value is\nused when libcurl cannot …\n"],["dns_cache_timeout","Curl::Easy","Curl/Easy.html#method-i-dns_cache_timeout","()","<p>Obtain the dns cache timeout in seconds.\n"],["dns_cache_timeout=","Curl::Easy","Curl/Easy.html#method-i-dns_cache_timeout-3D","(p1)","<p>Set the dns cache timeout in seconds. Name resolves will be kept in memory\nfor this number of seconds. …\n"],["download_speed","Curl::Easy","Curl/Easy.html#method-i-download_speed","()","<p>Retrieve the average download speed that curl measured for the preceeding\ncomplete download.\n"],["downloaded_bytes","Curl::Easy","Curl/Easy.html#method-i-downloaded_bytes","()","<p>Retrieve the total amount of bytes that were downloaded in the preceeding\ntransfer.\n"],["downloaded_content_length","Curl::Easy","Curl/Easy.html#method-i-downloaded_content_length","()","<p>Retrieve the content-length of the download. This is the value read from\nthe Content-Length: field.\n"],["dup","Curl::Easy","Curl/Easy.html#method-i-dup","()",""],["enable_cookies=","Curl::Easy","Curl/Easy.html#method-i-enable_cookies-3D","(p1)","<p>Configure whether the libcurl cookie engine is enabled for this Curl::Easy\ninstance.\n"],["enable_cookies?","Curl::Easy","Curl/Easy.html#method-i-enable_cookies-3F","()","<p>Determine whether the libcurl cookie engine is enabled for this Curl::Easy\ninstance.\n"],["encoding","Curl::Easy","Curl/Easy.html#method-i-encoding","()","<p>Get the set encoding types\n"],["encoding=","Curl::Easy","Curl/Easy.html#method-i-encoding-3D","(p1)","<p>Set the accepted encoding types, curl will handle all of the decompression\n"],["error","Curl::Easy","Curl/Easy.html#method-c-error","(p1)","<p>translate an internal libcurl error to ruby error class\n"],["escape","Curl::Easy","Curl/Easy.html#method-i-escape","(p1)","<p>Convert the given input string to a URL encoded string and return the\nresult. All input characters that …\n"],["fetch_file_time=","Curl::Easy","Curl/Easy.html#method-i-fetch_file_time-3D","(p1)","<p>Configure whether this Curl instance will fetch remote file times, if\navailable.\n"],["fetch_file_time?","Curl::Easy","Curl/Easy.html#method-i-fetch_file_time-3F","()","<p>Determine whether this Curl instance will fetch remote file times, if\navailable.\n"],["file","Curl::PostField","Curl/PostField.html#method-c-file","(p1, p2, p3 = v3, &block)","<p>Create a new Curl::PostField for a file upload field, supplying the local\nfilename to read from, and …\n"],["file_time","Curl::Easy","Curl/Easy.html#method-i-file_time","()","<p>Retrieve the remote time of the retrieved document (in number of seconds\nsince 1 jan 1970 in the GMT/UTC …\n"],["follow_location?","Curl::Easy","Curl/Easy.html#method-i-follow_location-3F","()","<p>Determine whether this Curl instance will follow Location: headers in HTTP\nresponses.\n"],["ftp_commands","Curl::Easy","Curl/Easy.html#method-i-ftp_commands","()","<p>call-seq\n\n<pre>easy.ftp_commands                                =&gt; array or nil</pre>\n"],["ftp_commands=","Curl::Easy","Curl/Easy.html#method-i-ftp_commands-3D","(p1)","<p>Explicitly sets the list of commands to execute on the FTP server when\ncalling perform\n"],["ftp_entry_path","Curl::Easy","Curl/Easy.html#method-i-ftp_entry_path","()","<p>Retrieve the path of the entry path. That is the initial path libcurl ended\nup in when logging on to …\n"],["ftp_filemethod","Curl::Easy","Curl/Easy.html#method-i-ftp_filemethod","()","<p>call-seq\n\n<pre>easy.ftp_filemethod                              =&gt; fixnum</pre>\n<p>Get the configuration for how libcurl …\n"],["ftp_filemethod=","Curl::Easy","Curl/Easy.html#method-i-ftp_filemethod-3D","(p1)","<p>Controls how libcurl reaches files on the server. Valid options are\nCurl::CURL_MULTICWD, Curl::CURL_NOCWD …\n"],["ftp_response_timeout","Curl::Easy","Curl/Easy.html#method-i-ftp_response_timeout","()","<p>Obtain the maximum time that libcurl will wait for FTP command responses.\n"],["ftp_response_timeout=","Curl::Easy","Curl/Easy.html#method-i-ftp_response_timeout-3D","(p1)","<p>Set a timeout period (in seconds) on the amount of time that the server is\nallowed to take in order to …\n"],["getinfo","Curl::Easy","Curl/Easy.html#method-i-getinfo","(p1)","<p>Iniital access to libcurl curl_easy_getinfo, remember getinfo doesn&#39;t\nreturn the same values as setopt …\n"],["gssnegotiate?","Curl","Curl.html#method-c-gssnegotiate-3F","()","<p>Returns true if the installed libcurl supports HTTP GSS-Negotiate. For\nlibcurl versions &lt; 7.10.6, …\n"],["header_in_body=","Curl::Easy","Curl/Easy.html#method-i-header_in_body-3D","(p1)","<p>Configure whether this Curl instance will return HTTP headers combined with\nbody data. If this option …\n"],["header_in_body?","Curl::Easy","Curl/Easy.html#method-i-header_in_body-3F","()","<p>Determine whether this Curl instance will return HTTP headers combined with\nbody data.\n"],["header_size","Curl::Easy","Curl/Easy.html#method-i-header_size","()","<p>Retrieve the total size of all the headers received in the preceeding\ntransfer.\n"],["header_str","Curl::Easy","Curl/Easy.html#method-i-header_str","()","<p>Return the response header from the previous call to <code>perform</code>.\nThis is populated by the default <code>on_header</code> …\n"],["headers","Curl::Easy","Curl/Easy.html#method-i-headers","()","<p>Obtain the custom HTTP headers for following requests.\n"],["headers=","Curl::Easy","Curl/Easy.html#method-i-headers-3D","(p1)","<p>Set custom HTTP headers for following requests. This can be used to add\ncustom headers, or override standard …\n"],["http","Curl::Easy","Curl/Easy.html#method-i-http","(p1)","<p>Send an HTTP request with method set to verb, using the current options set\nfor this Curl::Easy instance. …\n"],["http2?","Curl","Curl.html#method-c-http2-3F","()","<p>Returns true if the installed libcurl was built with support for HTTP2. For\nlibcurl versions &lt; 7.33.0 …\n"],["http_auth_types","Curl::Easy","Curl/Easy.html#method-i-http_auth_types","()","<p>Obtain the HTTP authentication types that may be used for the following\n<code>perform</code> calls.\n"],["http_auth_types=","Curl::Easy","Curl/Easy.html#method-i-http_auth_types-3D","(*args)","<p>Set the HTTP authentication types that may be used for the following\n<code>perform</code> calls. This is a bitmap …\n"],["http_connect_code","Curl::Easy","Curl/Easy.html#method-i-http_connect_code","()","<p>Retrieve the last received proxy response code to a CONNECT request.\n"],["http_post","Curl::Easy","Curl/Easy.html#method-i-http_post","(*args)","<p>POST the specified formdata to the currently configured URL using the\ncurrent options set for this Curl::Easy …\n"],["http_put","Curl::Easy","Curl/Easy.html#method-i-http_put","(p1)","<p>PUT the supplied data to the currently configured URL using the current\noptions set for this Curl::Easy …\n"],["idn?","Curl","Curl.html#method-c-idn-3F","()","<p>Returns true if the installed libcurl was built with support for IDNA,\ndomain names with international …\n"],["ignore_content_length=","Curl::Easy","Curl/Easy.html#method-i-ignore_content_length-3D","(p1)","<p>Configure whether this Curl::Easy instance should ignore the content length\nheader.\n"],["ignore_content_length?","Curl::Easy","Curl/Easy.html#method-i-ignore_content_length-3F","()","<p>Determine whether this Curl::Easy instance ignores the content length\nheader.\n"],["inspect","Curl::Easy","Curl/Easy.html#method-i-inspect","()",""],["interface","Curl::Easy","Curl/Easy.html#method-i-interface","()","<p>Obtain the interface name that is used as the outgoing network interface.\nThe name can be an interface …\n"],["ipv6?","Curl","Curl.html#method-c-ipv6-3F","()","<p>Returns true if the installed libcurl supports IPv6.\n"],["kerberos4?","Curl","Curl.html#method-c-kerberos4-3F","()","<p>Returns true if the installed libcurl supports Kerberos4 authentication\nwith FTP connections.\n"],["largefile?","Curl","Curl.html#method-c-largefile-3F","()","<p>Returns true if the installed libcurl was built with support for large\nfiles. For libcurl versions &lt; …\n"],["last_effective_url","Curl::Easy","Curl/Easy.html#method-i-last_effective_url","()","<p>Retrieve the last effective URL used by this instance. This is the URL used\nin the last <code>perform</code> call, …\n"],["last_result","Curl::Easy","Curl/Easy.html#method-i-last_result","()",""],["libz?","Curl","Curl.html#method-c-libz-3F","()","<p>Returns true if the installed libcurl supports HTTP deflate using libz. For\nlibcurl versions &lt; 7.10 …\n"],["local_file","Curl::PostField","Curl/PostField.html#method-i-local_file","()","<p>Get the POST field local filename for this PostField (when performing a\nfile upload).\n"],["local_file=","Curl::PostField","Curl/PostField.html#method-i-local_file-3D","(p1)","<p>Set the POST field local filename for this PostField (when performing a\nfile upload). Ignored when a …\n"],["local_port","Curl::Easy","Curl/Easy.html#method-i-local_port","()","<p>Obtain the local port that will be used for the following\n<code>perform</code> calls.\n<p>This option is ignored if compiled …\n"],["local_port=","Curl::Easy","Curl/Easy.html#method-i-local_port-3D","(p1)","<p>Set the local port that will be used for the following <code>perform</code>\ncalls.\n<p>Passing <code>nil</code> will return to the default …\n"],["local_port_range","Curl::Easy","Curl/Easy.html#method-i-local_port_range","()","<p>Obtain the local port range that will be used for the following\n<code>perform</code> calls.\n<p>This option is ignored …\n"],["local_port_range=","Curl::Easy","Curl/Easy.html#method-i-local_port_range-3D","(p1)","<p>Set the local port range that will be used for the following\n<code>perform</code> calls. This is a number (between …\n"],["low_speed_limit","Curl::Easy","Curl/Easy.html#method-i-low_speed_limit","()","<p>Obtain the minimum transfer speed over +low_speed+time+ below which the\ntransfer will be aborted.\n"],["low_speed_limit=","Curl::Easy","Curl/Easy.html#method-i-low_speed_limit-3D","(p1)","<p>Set the transfer speed (in bytes per second) that the transfer should be\nbelow during <code>low_speed_time</code> …\n"],["low_speed_time","Curl::Easy","Curl/Easy.html#method-i-low_speed_time","()","<p>Obtain the time that the transfer should be below\n<code>low_speed_limit</code> for the library to abort it.\n"],["low_speed_time=","Curl::Easy","Curl/Easy.html#method-i-low_speed_time-3D","(p1)","<p>Set the time (in seconds) that the transfer should be below the\n<code>low_speed_limit</code> for the library to consider …\n"],["max_connects=","Curl::Multi","Curl/Multi.html#method-i-max_connects-3D","(p1)","<p>Set the max connections in the cache for a multi handle\n"],["max_recv_speed_large","Curl::Easy","Curl/Easy.html#method-i-max_recv_speed_large","()","<p>Get the maximal receiving transfer speed (in bytes per second)\n"],["max_recv_speed_large=","Curl::Easy","Curl/Easy.html#method-i-max_recv_speed_large-3D","(p1)","<p>Set the maximal receiving transfer speed (in bytes per second)\n"],["max_redirects","Curl::Easy","Curl/Easy.html#method-i-max_redirects","()","<p>Obtain the maximum number of redirections to follow in the following\n<code>perform</code> calls.\n"],["max_redirects=","Curl::Easy","Curl/Easy.html#method-i-max_redirects-3D","(p1)","<p>Set the maximum number of redirections to follow in the following\n<code>perform</code> calls. Set to nil or -1 allow …\n"],["max_send_speed_large","Curl::Easy","Curl/Easy.html#method-i-max_send_speed_large","()","<p>Get the maximal sending transfer speed (in bytes per second)\n"],["max_send_speed_large=","Curl::Easy","Curl/Easy.html#method-i-max_send_speed_large-3D","(p1)","<p>Set the maximal sending transfer speed (in bytes per second)\n"],["multi","Curl::Easy","Curl/Easy.html#method-i-multi","()",""],["multi=","Curl::Easy","Curl/Easy.html#method-i-multi-3D","(p1)",""],["multipart_form_post=","Curl::Easy","Curl/Easy.html#method-i-multipart_form_post-3D","(p1)","<p>Configure whether this Curl instance uses multipart/formdata content type\nfor HTTP POST requests. If …\n"],["multipart_form_post?","Curl::Easy","Curl/Easy.html#method-i-multipart_form_post-3F","()","<p>Determine whether this Curl instance uses multipart/formdata content type\nfor HTTP POST requests.\n"],["name","Curl::PostField","Curl/PostField.html#method-i-name","()","<p>Obtain the POST field name for this PostField.\n"],["name=","Curl::PostField","Curl/PostField.html#method-i-name-3D","(p1)","<p>Set the POST field name for this PostField.\n"],["name_lookup_time","Curl::Easy","Curl/Easy.html#method-i-name_lookup_time","()","<p>Retrieve the time, in seconds, it took from the start until the name\nresolving was completed.\n"],["new","Curl::Easy","Curl/Easy.html#method-c-new","(p1 = v1, &block)","<p>Initialize a new Curl::Easy instance, optionally supplying the URL. The\nblock form allows further configuration …\n"],["new","Curl::Multi","Curl/Multi.html#method-c-new","()","<p>Create a new Curl::Multi instance\n"],["new","Curl::Upload","Curl/Upload.html#method-c-new","()",""],["ntlm?","Curl","Curl.html#method-c-ntlm-3F","()","<p>Returns true if the installed libcurl supports HTTP NTLM. For libcurl\nversions &lt; 7.10.6, always returns …\n"],["num_connects","Curl::Easy","Curl/Easy.html#method-i-num_connects","()","<p>Retrieve the number of new connections libcurl had to create to achieve the\nprevious transfer (only the …\n"],["offset","Curl::Upload","Curl/Upload.html#method-i-offset","()",""],["offset=","Curl::Upload","Curl/Upload.html#method-i-offset-3D","(p1)",""],["on_body","Curl::Easy","Curl/Easy.html#method-i-on_body","(*args)","<p>Assign or remove the <code>on_body</code> handler for this Curl::Easy\ninstance. To remove a previously-supplied handler, …\n"],["on_complete","Curl::Easy","Curl/Easy.html#method-i-on_complete","(*args)","<p>Assign or remove the <code>on_complete</code> handler for this Curl::Easy\ninstance. To remove a previously-supplied …\n"],["on_debug","Curl::Easy","Curl/Easy.html#method-i-on_debug","(*args)","<p>Assign or remove the <code>on_debug</code> handler for this Curl::Easy\ninstance. To remove a previously-supplied handler, …\n"],["on_failure","Curl::Easy","Curl/Easy.html#method-i-on_failure","(*args)","<p>Assign or remove the <code>on_failure</code> handler for this Curl::Easy\ninstance. To remove a previously-supplied …\n"],["on_header","Curl::Easy","Curl/Easy.html#method-i-on_header","(*args)","<p>Assign or remove the <code>on_header</code> handler for this Curl::Easy\ninstance. To remove a previously-supplied …\n"],["on_missing","Curl::Easy","Curl/Easy.html#method-i-on_missing","(*args)","<p>Assign or remove the on_missing handler for this Curl::Easy instance. To\nremove a previously-supplied …\n"],["on_progress","Curl::Easy","Curl/Easy.html#method-i-on_progress","(*args)","<p>Assign or remove the <code>on_progress</code> handler for this Curl::Easy\ninstance. To remove a previously-supplied …\n"],["on_redirect","Curl::Easy","Curl/Easy.html#method-i-on_redirect","(*args)","<p>Assign or remove the on_redirect handler for this Curl::Easy instance. To\nremove a previously-supplied …\n"],["on_success","Curl::Easy","Curl/Easy.html#method-i-on_success","(*args)","<p>Assign or remove the <code>on_success</code> handler for this Curl::Easy\ninstance. To remove a previously-supplied …\n"],["os_errno","Curl::Easy","Curl/Easy.html#method-i-os_errno","()","<p>Retrieve the errno variable from a connect failure (requires libcurl 7.12.2\nor higher, otherwise 0 is …\n"],["password","Curl::Easy","Curl/Easy.html#method-i-password","()","<p>Get the current password\n"],["password=","Curl::Easy","Curl/Easy.html#method-i-password-3D","(p1)","<p>Set the HTTP Authentication password.\n"],["perform","Curl::Multi","Curl/Multi.html#method-i-perform","(&block)","<p>Run multi handles, looping selecting when data can be transfered\n"],["pipeline=","Curl::Multi","Curl/Multi.html#method-i-pipeline-3D","(p1)","<p>Pass a long set to 1 for HTTP/1.1 pipelining, 2 for HTTP/2 multiplexing, or\n0 to disable.\n\n<pre>Enabling pipelining ...</pre>\n"],["post_body","Curl::Easy","Curl/Easy.html#method-i-post_body","()","<p>Obtain the POST body used in this Curl::Easy instance.\n"],["post_body=","Curl::Easy","Curl/Easy.html#method-i-post_body-3D","(p1)","<p>Sets the POST body of this Curl::Easy instance.  This is expected to be URL\nencoded; no additional processing …\n"],["pre_transfer_time","Curl::Easy","Curl/Easy.html#method-i-pre_transfer_time","()","<p>Retrieve the time, in seconds, it took from the start until the file\ntransfer is just about to begin. …\n"],["primary_ip","Curl::Easy","Curl/Easy.html#method-i-primary_ip","()","<p>Retrieve the resolved IP of the most recent connection done with this curl\nhandle. This string may be …\n"],["proxy_auth_types","Curl::Easy","Curl/Easy.html#method-i-proxy_auth_types","()","<p>Obtain the proxy authentication types that may be used for the following\n<code>perform</code> calls.\n"],["proxy_auth_types=","Curl::Easy","Curl/Easy.html#method-i-proxy_auth_types-3D","(p1)","<p>Set the proxy authentication types that may be used for the following\n<code>perform</code> calls. This is a bitmap …\n"],["proxy_headers","Curl::Easy","Curl/Easy.html#method-i-proxy_headers","()","<p>Obtain the custom HTTP proxy_headers for following requests.\n"],["proxy_headers=","Curl::Easy","Curl/Easy.html#method-i-proxy_headers-3D","(p1)",""],["proxy_port","Curl::Easy","Curl/Easy.html#method-i-proxy_port","()","<p>Obtain the proxy port that will be used for the following\n<code>perform</code> calls.\n"],["proxy_port=","Curl::Easy","Curl/Easy.html#method-i-proxy_port-3D","(p1)","<p>Set the proxy port that will be used for the following <code>perform</code>\ncalls.\n"],["proxy_tunnel=","Curl::Easy","Curl/Easy.html#method-i-proxy_tunnel-3D","(p1)","<p>Configure whether this Curl instance will use proxy tunneling.\n"],["proxy_tunnel?","Curl::Easy","Curl/Easy.html#method-i-proxy_tunnel-3F","()","<p>Determine whether this Curl instance will use proxy tunneling.\n"],["proxy_type","Curl::Easy","Curl/Easy.html#method-i-proxy_type","()","<p>Obtain the proxy type that will be used for the following\n<code>perform</code> calls.\n"],["proxy_type=","Curl::Easy","Curl/Easy.html#method-i-proxy_type-3D","(p1)","<p>Set the proxy type that will be used for the following <code>perform</code>\ncalls. This should be one of the Curl::CURLPROXY …\n"],["proxy_url","Curl::Easy","Curl/Easy.html#method-i-proxy_url","()","<p>Obtain the HTTP Proxy URL that will be used by subsequent calls to\n<code>perform</code>.\n"],["proxypwd","Curl::Easy","Curl/Easy.html#method-i-proxypwd","()","<p>Obtain the username/password string that will be used for proxy connection\nduring subsequent calls to …\n"],["put_data=","Curl::Easy","Curl/Easy.html#method-i-put_data-3D","(p1)","<p>Points this Curl::Easy instance to data to be uploaded via PUT.  This sets\nthe request to a PUT type …\n"],["redirect_count","Curl::Easy","Curl/Easy.html#method-i-redirect_count","()","<p>Retrieve the total number of redirections that were actually followed.\n<p>Requires libcurl 7.9.7 or higher, …\n"],["redirect_time","Curl::Easy","Curl/Easy.html#method-i-redirect_time","()","<p>Retrieve the total time, in seconds, it took for all redirection steps\ninclude name lookup, connect, …\n"],["redirect_url","Curl::Easy","Curl/Easy.html#method-i-redirect_url","()","<p>Retrieve  the URL a redirect would take you to if you would enable\nCURLOPT_FOLLOWLOCATION.\n<p>Requires libcurl …\n"],["remote_file","Curl::PostField","Curl/PostField.html#method-i-remote_file","()","<p>Get the POST field remote filename for this PostField (when performing a\nfile upload).\n"],["remote_file=","Curl::PostField","Curl/PostField.html#method-i-remote_file-3D","(p1)","<p>Set the POST field remote filename for this PostField (when performing a\nfile upload). If no remote filename …\n"],["request_size","Curl::Easy","Curl/Easy.html#method-i-request_size","()","<p>Retrieve the total size of the issued requests. This is so far only for\nHTTP requests. Note that this …\n"],["reset","Curl::Easy","Curl/Easy.html#method-i-reset","()","<p>Reset the Curl::Easy instance, clears out all settings.\n<p>from curl.haxx.se/libcurl/c/curl_easy_reset.html …\n"],["resolve","Curl::Easy","Curl/Easy.html#method-i-resolve","()","<p>call-seq\n\n<pre>easy.resolve                                =&gt; array or nil</pre>\n"],["resolve=","Curl::Easy","Curl/Easy.html#method-i-resolve-3D","(p1)","<p>Set the resolve list to statically resolve hostnames to IP addresses,\nbypassing DNS for matching hostname/port …\n"],["resolve_mode","Curl::Easy","Curl/Easy.html#method-i-resolve_mode","()","<p>Determines what type of IP address this Curl::Easy instance resolves DNS\nnames to.\n"],["resolve_mode=","Curl::Easy","Curl/Easy.html#method-i-resolve_mode-3D","(p1)","<p>Configures what type of IP address this Curl::Easy instance resolves DNS\nnames to. Valid options are: …\n"],["response_code","Curl::Easy","Curl/Easy.html#method-i-response_code","()","<p>Retrieve the last received HTTP or FTP code. This will be zero if no server\nresponse code has been received. …\n"],["set_content_proc","Curl::PostField","Curl/PostField.html#method-i-set_content_proc","(*args)","<p>Set a content proc for this field. This proc will be called during the\nperform to supply the content …\n"],["setopt","Curl::Easy","Curl/Easy.html#method-i-setopt","(p1, p2)","<p>Initial access to libcurl curl_easy_setopt\n"],["spnego?","Curl","Curl.html#method-c-spnego-3F","()","<p>Returns true if the installed libcurl was built with support for SPNEGO\nauthentication (Simple and Protected …\n"],["ssl?","Curl","Curl.html#method-c-ssl-3F","()","<p>Returns true if the installed libcurl supports SSL connections. For libcurl\nversions &lt; 7.10, always …\n"],["ssl_verify_host","Curl::Easy","Curl/Easy.html#method-i-ssl_verify_host","()","<p>Determine whether this Curl instance will verify that the server cert is\nfor the server it is known as. …\n"],["ssl_verify_host_integer=","Curl::Easy","Curl/Easy.html#method-i-ssl_verify_host_integer-3D","(p1)","<p>Configure whether this Curl instance will verify that the server cert is\nfor the server it is known as. …\n"],["ssl_verify_peer=","Curl::Easy","Curl/Easy.html#method-i-ssl_verify_peer-3D","(p1)","<p>Configure whether this Curl instance will verify the SSL peer certificate.\nWhen true (the default), and …\n"],["ssl_verify_peer?","Curl::Easy","Curl/Easy.html#method-i-ssl_verify_peer-3F","()","<p>Determine whether this Curl instance will verify the SSL peer certificate.\n"],["ssl_verify_result","Curl::Easy","Curl/Easy.html#method-i-ssl_verify_result","()","<p>Retrieve the result of the certification verification that was requested\n(by setting <code>ssl_verify_peer?</code> …\n"],["ssl_version","Curl::Easy","Curl/Easy.html#method-i-ssl_version","()","<p>Get the version of SSL/TLS that libcurl will attempt to use.\n"],["ssl_version=","Curl::Easy","Curl/Easy.html#method-i-ssl_version-3D","(p1)","<p>Sets the version of SSL/TLS that libcurl will attempt to use. Valid options\nare:\n\n<pre>Curl::CURL_SSLVERSION_DEFAULT ...</pre>\n"],["sspi?","Curl","Curl.html#method-c-sspi-3F","()","<p>Returns true if the installed libcurl was built with support for SSPI. This\nis only available on Windows …\n"],["start_transfer_time","Curl::Easy","Curl/Easy.html#method-i-start_transfer_time","()","<p>Retrieve the time, in seconds, it took from the start until the first byte\nis just about to be transferred. …\n"],["stream","Curl::Upload","Curl/Upload.html#method-i-stream","()",""],["stream=","Curl::Upload","Curl/Upload.html#method-i-stream-3D","(p1)",""],["timeout","Curl::Easy","Curl/Easy.html#method-i-timeout","()","<p>Obtain the maximum time in seconds that you allow the libcurl transfer\noperation to take.\n<p>Uses timeout_ms …\n"],["timeout=","Curl::Easy","Curl/Easy.html#method-i-timeout-3D","(p1)","<p>Set the maximum time in seconds that you allow the libcurl transfer\noperation to take. Normally, name …\n"],["timeout_ms","Curl::Easy","Curl/Easy.html#method-i-timeout_ms","()","<p>Obtain the maximum time in milliseconds that you allow the libcurl transfer\noperation to take.\n"],["timeout_ms=","Curl::Easy","Curl/Easy.html#method-i-timeout_ms-3D","(p1)","<p>Set the maximum time in milliseconds that you allow the libcurl transfer\noperation to take. Normally …\n"],["to_s","Curl::PostField","Curl/PostField.html#method-i-to_s","()",""],["to_str","Curl::PostField","Curl/PostField.html#method-i-to_str","()","<p>Obtain a String representation of this PostField in url-encoded  format.\nThis is used to construct the …\n"],["total_time","Curl::Easy","Curl/Easy.html#method-i-total_time","()","<p>Retrieve the total time in seconds for the previous transfer, including\nname resolving, TCP connect etc. …\n"],["unescape","Curl::Easy","Curl/Easy.html#method-i-unescape","(p1)","<p>Convert the given URL encoded input string to a “plain string” and return\nthe result. All input …\n"],["unrestricted_auth=","Curl::Easy","Curl/Easy.html#method-i-unrestricted_auth-3D","(p1)","<p>Configure whether this Curl instance may use any HTTP authentication method\navailable when necessary. …\n"],["unrestricted_auth?","Curl::Easy","Curl/Easy.html#method-i-unrestricted_auth-3F","()","<p>Determine whether this Curl instance may use any HTTP authentication method\navailable when necessary. …\n"],["upload_speed","Curl::Easy","Curl/Easy.html#method-i-upload_speed","()","<p>Retrieve the average upload speed that curl measured for the preceeding\ncomplete upload.\n"],["uploaded_bytes","Curl::Easy","Curl/Easy.html#method-i-uploaded_bytes","()","<p>Retrieve the total amount of bytes that were uploaded in the preceeding\ntransfer.\n"],["uploaded_content_length","Curl::Easy","Curl/Easy.html#method-i-uploaded_content_length","()","<p>Retrieve the content-length of the upload.\n"],["url","Curl::Easy","Curl/Easy.html#method-i-url","()","<p>Obtain the URL that will be used by subsequent calls to\n<code>perform</code>.\n"],["use_netrc=","Curl::Easy","Curl/Easy.html#method-i-use_netrc-3D","(p1)","<p>Configure whether this Curl instance will use data from the user&#39;s\n.netrc file for FTP connections. …\n"],["use_netrc?","Curl::Easy","Curl/Easy.html#method-i-use_netrc-3F","()","<p>Determine whether this Curl instance will use data from the user&#39;s\n.netrc file for FTP connections. …\n"],["use_ssl","Curl::Easy","Curl/Easy.html#method-i-use_ssl","()","<p>Get the desired level for using SSL on FTP connections.\n"],["use_ssl=","Curl::Easy","Curl/Easy.html#method-i-use_ssl-3D","(p1)","<p>Ensure libcurl uses SSL for FTP connections. Valid options are\nCurl::CURL_USESSL_NONE, Curl::CURL_USESSL_TRY …\n"],["useragent","Curl::Easy","Curl/Easy.html#method-i-useragent","()","<p>Obtain the user agent string used for this Curl::Easy instance\n"],["useragent=","Curl::Easy","Curl/Easy.html#method-i-useragent-3D","(p1)","<p>Set the user agent string for this Curl::Easy instance\n"],["username","Curl::Easy","Curl/Easy.html#method-i-username","()","<p>Get the current username\n"],["username=","Curl::Easy","Curl/Easy.html#method-i-username-3D","(p1)","<p>Set the HTTP Authentication username.\n"],["userpwd","Curl::Easy","Curl/Easy.html#method-i-userpwd","()","<p>Obtain the username/password string that will be used for subsequent calls\nto <code>perform</code>.\n"],["verbose=","Curl::Easy","Curl/Easy.html#method-i-verbose-3D","(p1)","<p>Configure whether this Curl instance gives verbose output to STDERR during\ntransfers. Ignored if this …\n"],["verbose?","Curl::Easy","Curl/Easy.html#method-i-verbose-3F","()","<p>Determine whether this Curl instance gives verbose output to STDERR during\ntransfers.\n"],["LICENSE","","LICENSE.html","","<p>Copyright © 2006 Ross Bamford (rosco AT roscopeco DOT co DOT uk). Curb is\nfree software licensed under …\n"]]}}